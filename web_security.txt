Project 4: Web Security Report Entry Fall 2020 Task 1 – Warm Up Exercises  Activity 1 - The Inspector & Console tabs 1. What is the value of the ‘CanYouSeeMe’ input? Do not include quotes in your answer. TheCakeIsALie  2. The page references a single JavaScript file in a script tag. Name this file including the file extension. Do not include the path, just the file and extension. Ex: “ajavascriptfile.js”. cs6035.js  3. The script file has a JavaScript function named ‘runme’. Use the console to execute this function. What is the output that shows up in the console? 42   Activity 2 - Network Tab 1. What request method (http verb) was used in the request to the server? Post  2. What status code did the server return? Include both the code and description. Ex: “200 Ok” “418 I’m a teapot”   3. The server returned a cookie named ‘coffee’ for the browser to store. What is the value of this cookie? Do not include quotes in your answer.  With_Cream  Activity 3 - Built-in browser protections 1. You can do more than just echo back text. Construct a URL such that a JavaScript alert dialog appears with the text cs6035 on the screen. Upload activity3.html and paste in a screenshot of the page with the dialog as your answer below. Be sure to include the URL of the browser in your screenshot.   Graphical user interface, application, WordDescription automatically generated  Activity 4 - Submitting forms 1. Copy and paste below the entire output message you see and submit that as your answer to this activity. Upload activity4.html which is the form that you constructed. Congratulations!, you’ve successfully finished this activity. The answer is Birthday Cake   Activity 5 - Accessing the DOM with JavaScript 1. Upload activity5.html which is the form that you constructed. No other answers are required for this activity.    Task 5 – Epilogue Questions  Target 1 Epilogue  1. List the PHP page and lines that should be changed to fix the vulnerability. Lines 17-36 is where the vulnerability exists for me to attack.  2. Describe in detail why the code listed in the line numbers above are vulnerable. You’re free to use generalized concepts to help show your understanding but we also need to know details that pertain to this target and assignment. A definition of XSRF is not what we’re looking for.  An attacker who wishes to key in his bank account number and routing number will already be logged in as the user, so the request coming from t1.html will be served like a genuine request. Since, I am able to hardcode the banking details in the form submission , and I am able to overcome the CSRF attempt prevented as the expected value is made visible, I am able to mount a successful attack. (Chandel, 2020)  I was able to glean on the fact that if the values for $_Post[‘VGFyZ2V0MUZhbGwyMDIwLVRyaWNrTG9nZ2VkSW5Vc2Vycw’] (was in plain text, varId was fixed at 42 as a constant obtained from the runme() in cs6035.js. None of them were encoded or randomized.) was the same and $_POST[‘action’] was a save button click, then I was inside the vulnerability to get access to the various notify(messages). The logic with variables with unchanged values helped me a lot. Then it was a matter of providing the supplied account number and routing number along with the challenge number left blank intentionally, to compare against the expected value calculation. We are also provided with another notify message about the attack being prevented along with the test string and expected values. Since the expected value is also explicitly provided, I was able to hard code all this information to exploit the vulnerability  3. Explanation of how to fix the code. Feel free to include snippets and examples. Be detailed! if ($action == 'save' && $_POST['VGFyZ2V0MUZhbGwyMDIwLVRyaWNrTG9nZ2VkSW5Vc2Vycw'] == 'VGFyZ2V0MUZhbGwyMDIwLVRyaWNrTG9nZ2VkSW5Vc2Vycw') {  if($_POST["varId"] != "42"){ In the above line numbers, the value of $_Post[] is compared against a constant value that is visible and the same way the value of varId should not be kept constant. They need to be changed to fix the vulnerability. if ($_POST['response'] != $expected) {  notify('CSRF attempt prevented!'.$teststr.'--'.$_POST['response'].' != '.$expected, -1);  } else {  $accounting = ($_POST['account']).':'.($_POST['routing']);  $db->query("UPDATE users SET accounting='$accounting' WHERE user_id='".$auth->user_id()."'");  notify('Changes saved');  }  Also, the value of the $_POST[‘response’] should not be explicitly displayed. The error message also provided detailed information regarding the expected values for the attack to succeed. This would potentially close the vulnerability.   Target 2 Epilogue  1. List the PHP page and lines that should be changed to fix the vulnerability. The vulnerability exists in the index.php page and at lines 6-18. There is also a vulnerability that the name of the button is login and the name of the input type field is login. We can use this vulnerability to name the java script function .  2. Describe in detail why the code listed in the line numbers above are vulnerable. You’re free to use generalized concepts to help show your understanding but we also need to know details that pertain to this target and assignment. A definition of XSS is not what we’re looking for.  The php code displays the expected value for the $_POST[‘RGF0YWJhc2VIYWNrc01ha2VUYXJnZXQzRmFsbDIwMj’] request and compares it against expected value again hardcoded which helps an attacker glean on the expected form action values and other field values. There is also another empty form tag left unused. This can be manipulated to embed the attack script. From here, the script can monitor any of the events in the second form which has the username, password fields and login button. Once the user, enters the values and clicks the login the $_POST[] action in the below code snippet will execute along with the embedded attack JS script and send the emal to the mail folder. $action = @$_POST['action']; if ($action == 'login') {  if($_POST['RGF0YWJhc2VIYWNrc01ha2VUYXJnZXQzRmFsbDIwMjA'] == 'RGF0YWJhc2VIYWNrc01ha2VUYXJnZXQzRmFsbDIwMjA') {  $auth->login($_POST['login'], $_POST['pw']);  } } elseif ($action == 'register') {  $auth->register($_POST['name'], $_POST['login'], $_POST['pw1'], $_POST['pw2']); }  // if the user is logged in, redirect him to home.php if ($auth->user_id()) {  header('location: /account.php'); }   An attacker can then carefully encode a Javascript from the attack page (t2.html) to the payroll login page. Once the script is embedded in the login page, to which the user arrives by clicking on a link would start entering their login credentials. Then the embedded script can capture all form values and wait for the button click even to trigger the email being sent to the mail folder with the users username and password. (Chandel, 2020).  3. Explanation of how to fix the code. Feel free to include snippets and examples. Be detailed! a. Be careful with your explanation here. There are wrong ways to fix this vulnerability. Hint: Never write your own crypto algorithms. This concept extends to XSS sanitization. b. Warning: Removing site functionality will not be accepted here.    Target 3 Epilogue  1. List the PHP page and lines that should be changed to fix the vulnerability. The vulnerability lies in the php file auth.php. Line 33 and Line 37 are the vulnerable lines which are being exploited.  2. Describe in detail why the code listed in the line numbers above are vulnerable. You’re free to use generalized concepts to help show your understanding but we also need to know details that pertain to this target and assignment. A definition of SQL Injection is not what we’re looking for.  The code in the above lines are vulnerable because, they do not sanitize the SQL input for all possible combination of inputs. As a result, a SQLi injection is still possible with user input coming from a malicious website (the form in t2.html form in our case), that stops the query from proceeding to evaluate the password field. This lets an attacker login to the website with just knowing an existing user’s username and inputting that in the username text field along with the SQL injection command. Like I mentioned above since all possible combination of input strings aren’t filtered, I am able to use ‘username ‘oR 1=1’ in my username input field in the form that causes an SQLi attack and lets log me into the application. I have exploited the vulnerability that the query string only checks for either all caps OR or all small letters or. (What is Sql Injection, https://www.acunetix.com/websitesecurity/sql-injection/) Since there is no check for mixed case check, I was able to exploit that and use the vulnerability. If the filtered string checks also included mixed case checks, such a vulnerability can be fixed. Lines 33 and 37 are the vulnerable lines. Instead of str_replace function, if the function str_ireplace is used, which is the case insensitive replacement, then such a vulnerability will be addressed.  3. Explanation of how to fix the code. Feel free to include snippets and examples. Be detailed! a. Be careful with your explanation here. There are wrong ways to fix this vulnerability. Hint: Never write your own crypto algorithms. This concept extends to SQL sanitization.   I would work on fixing the vulnerability by making a more robust filtering list. I would also include the following code in the set of filtered values: $filtered_string = str_ireplace("oR","",$filtered_string);  For the rest of the strings also, if the mixed case of the string values are there, it would not get caught in the set of filtered strings in the existeing code. So with the use of str_ireplace function, mixed cases can be caught. For all the lines 33 to 42, it’s better to replace str_replace with str_ireplace function which will be a case insensitive replacement.  For example:  $filtered_string = str_replace("or","",$filtered_string);  $filtered_string = str_replace("OR","",$filtered_string);  Can be replaced by   $filtered_string = str_ireplace("or","",$filtered_string;  Similar thing can be done for all the other strings. Additional Targets 1. Describe any two additional issues (they need not be code issues) that create security holes in the site. o For the SQL injection, the other strings are not checked for mixed case. They are all checked either for all caps or all small. o Input validation and user input escaping/sanitization is not there in any of the code files. So programmers need to be aware of such issues while coding and follow coding best practices.   2. Provide an explanation of how to safely fix the identified issues. Feel free to include snippets and examples. Be detailed! o In auth.php to fix this vulnerability, we can use the function str_ireplace functions for all of the strings. Making use of the latest releases of external libraries helps to prevent presence of vulnerable code.            Works Cited You are required to include works cited  Chandel, Raj, Understanding the CSRF Vulnerability (A beginner’s guide) (2020), Available https://www.hackingarticles.in/understanding-the-csrf-vulnerability-a-beginners-guide/  Chandel, Raj, Comprehensive Guide on Cross-Site Scripting (XSS) Available https://www.hackingarticles.in/comprehensive-guide-on-cross-site-scripting-xss/  PHP Manual > Function Reference > Text Processing > Strings which contains a detailed description of all the string functions available in PHP: Available https://www.php.net/manual/en/ref.strings.php  What is SQL Injection, Available https://www.acunetix.com/websitesecurity/sql-injection/        